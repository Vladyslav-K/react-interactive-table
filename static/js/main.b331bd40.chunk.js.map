{"version":3,"sources":["components/Styled/index.js","components/Square/index.js","components/App/index.js","index.js"],"names":["Wrapper","styled","div","Container","props","containerAbsolute","containerLeft","containerTop","Table","table","Cell","td","cellSize","Button","AddButtons","RemoveButtons","AddRowButton","AddColumnButton","RemoveRowButton","removeRowButtonDisplay","buttonsVisible","removeRowButtonTop","RemoveColumnButton","removeColumnButtonDisplay","removeColumnButtonLeft","Square","createSquare","state","square","key","initialHeight","initialWidth","rows","columns","cells","setState","onDragStart","clientX","clientY","offsetX","offsetY","containerRef","current","getBoundingClientRect","left","top","dragging","onDragging","pageX","pageY","onDragEnd","movingButtons","target","currentRowIndex","currentCellIndex","tagName","offsetLeft","offsetTop","cellIndex","parentNode","rowIndex","createColumn","map","row","push","createRow","length","deleteColumn","lastCellIndex","splice","deleteRow","lastRowIndex","showButtons","hideButtons","React","createRef","this","className","onMouseMove","onMouseUp","ref","onMouseOver","onMouseEnter","onMouseLeave","onMouseDown","cell","onClick","classname","Component","defaultProps","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b331bd40.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n  height: 100vh;\n  width: 100vw;\n\n  margin: 0;\n  padding: 0;\n`;\n\nconst Container = styled.div`\n  display: inline-block;\n\n  position: ${props =>\n    props.containerAbsolute === true ? \"absolute\" : \"relative\"};\n\n  left: ${props => props.containerLeft}px;\n  top: ${props => props.containerTop}px;\n`;\n\nconst Table = styled.table`\n  border: 1px solid #48aae6;\n  cursor: grab;\n`;\n\nconst Cell = styled.td`\n  height: ${props => props.cellSize}px;\n  width: ${props => props.cellSize}px;\n\n  padding: 0;\n\n  background-color: #48aae6;\n`;\n\nconst Button = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: absolute;\n\n  height: ${props => props.cellSize}px;\n  width: ${props => props.cellSize}px;\n  margin: 2px;\n\n  color: #ffffff;\n\n  font-size: ${props => props.cellSize / 2}px;\n  font-weight: bold;\n  text-align: center;\n\n  opacity: 1;\n\n  transition-duration: 0.6s;\n  cursor: pointer;\n\n  &:hover {\n    opacity: 0.8;\n    transition-duration: 0.5s;\n  }\n`;\n\nconst AddButtons = styled(Button)`\n  background-color: #f3a500;\n`;\n\nconst RemoveButtons = styled(Button)`\n  display: block;\n  visibility: hidden;\n\n  background-color: #b20000;\n\n  line-height: ${props => props.cellSize - props.cellSize / 5}px;\n`;\n\nconst AddRowButton = styled(AddButtons)`\n  top: 100%;\n  left: 1px;\n`;\n\nconst AddColumnButton = styled(AddButtons)`\n  top: 1px;\n  left: 100%;\n`;\n\nconst RemoveRowButton = styled(RemoveButtons)`\n  display: ${props =>\n    props.removeRowButtonDisplay === true ? \"block\" : \"none\"};\n  visibility: ${props =>\n    props.buttonsVisible === true ? \"visible\" : \"hidden\"};\n  opacity: ${props => (props.buttonsVisible === true ? 1 : 0)};\n\n  top: ${props => props.removeRowButtonTop}px;\n  right: 100%;\n\n  margin: 1px 2px;\n`;\n\nconst RemoveColumnButton = styled(RemoveButtons)`\n  display: ${props =>\n    props.removeColumnButtonDisplay === true ? \"block\" : \"none\"};\n  visibility: ${props =>\n    props.buttonsVisible === true ? \"visible\" : \"hidden\"};\n  opacity: ${props => (props.buttonsVisible === true ? 1 : 0)};\n\n  bottom: 100%;\n  left: ${props => props.removeColumnButtonLeft}px;\n\n  margin: 2px 1px;\n`;\n\nexport {\n  Wrapper,\n  Container,\n  Table,\n  Cell,\n  AddRowButton,\n  AddColumnButton,\n  RemoveRowButton,\n  RemoveColumnButton\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  Wrapper,\n  Container,\n  Table,\n  Cell,\n  AddRowButton,\n  AddColumnButton,\n  RemoveRowButton,\n  RemoveColumnButton\n} from \"../Styled\";\n\nexport default class Square extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      square: [],\n      key: 0,\n\n      containerLeft: this.props.cellSize * 2,\n      containerTop: this.props.cellSize * 2,\n\n      currentCellIndex: 0,\n      currentRowIndex: 0,\n\n      buttonsVisible: false,\n      removeRowButtonDisplay: true,\n      removeColumnButtonDisplay: true,\n\n      removeRowButtonTop: 0,\n      removeColumnButtonLeft: 0,\n\n      containerAbsolute: false,\n      dragging: false,\n      offsetX: 0,\n      offsetY: 0\n    };\n\n    this.containerRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.createSquare();\n  }\n\n  createSquare = () => {\n    let { square, key } = this.state;\n    let { initialHeight, initialWidth } = this.props;\n\n    for (let rows = 0; rows < initialHeight; rows++) {\n      let columns = [];\n\n      for (let cells = 0; cells < initialWidth; cells++) {\n        columns[cells] = {\n          key: key++\n        };\n      }\n\n      square[rows] = {\n        key: key++,\n        columns: columns\n      };\n    }\n\n    this.setState({\n      square,\n      key\n    });\n  };\n\n  onDragStart = ({ clientX, clientY }) => {\n    let { offsetX, offsetY } = this.state;\n\n    offsetX = clientX - this.containerRef.current.getBoundingClientRect().left;\n    offsetY = clientY - this.containerRef.current.getBoundingClientRect().top;\n\n    this.setState({\n      dragging: true,\n      containerAbsolute: true,\n      offsetX: offsetX,\n      offsetY: offsetY\n    });\n  };\n\n  onDragging = ({ pageX, pageY }) => {\n    let {\n      offsetX,\n      offsetY,\n      containerLeft,\n      containerTop,\n      dragging\n    } = this.state;\n\n    if (dragging) {\n      containerLeft = pageX - offsetX;\n      containerTop = pageY - offsetY;\n\n      this.setState({\n        containerLeft: containerLeft,\n        containerTop: containerTop\n      });\n    }\n  };\n\n  onDragEnd = () => {\n    this.setState({\n      dragging: false,\n      containerAbsolute: false\n    });\n  };\n\n  movingButtons = ({ target }) => {\n    let {\n      currentRowIndex,\n      currentCellIndex,\n      removeColumnButtonLeft,\n      removeRowButtonTop\n    } = this.state;\n\n    if (target.tagName === \"TD\") {\n      removeColumnButtonLeft = target.offsetLeft;\n      removeRowButtonTop = target.offsetTop;\n      currentCellIndex = target.cellIndex;\n      currentRowIndex = target.parentNode.rowIndex;\n    }\n\n    this.setState({\n      currentRowIndex,\n      currentCellIndex,\n      removeColumnButtonLeft,\n      removeRowButtonTop\n    });\n  };\n\n  createColumn = () => {\n    let { square, key } = this.state;\n\n    square.map(row => row.columns.push({ key: key++ }));\n\n    this.setState({\n      square,\n      key\n    });\n  };\n\n  createRow = () => {\n    let { square, key } = this.state;\n\n    let columns = [];\n\n    for (let cells = 0; cells < square[0].columns.length; cells++) {\n      columns.push({\n        key: key++\n      });\n    }\n\n    square.push({\n      key: key++,\n      columns: columns\n    });\n\n    this.setState({\n      square,\n      key\n    });\n  };\n\n  deleteColumn = () => {\n    let { square, currentCellIndex, removeColumnButtonLeft } = this.state;\n    let { cellSize } = this.props;\n\n    const columns = square[0].columns.length;\n    const lastCellIndex = columns - 1;\n\n    if (columns > 1) {\n      square.map(row => row.columns.splice(currentCellIndex, 1));\n    }\n\n    if (currentCellIndex === lastCellIndex) {\n      /* In this formula \"2\" - the padding of each cell, for the correct movement\n      of the button should be considered when calculating */\n      removeColumnButtonLeft =\n        cellSize * (currentCellIndex - 1) + 2 * currentCellIndex;\n\n      currentCellIndex--;\n    }\n\n    if (lastCellIndex <= 1) {\n      this.setState({\n        removeColumnButtonDisplay: false\n      });\n    }\n\n    this.setState({\n      square,\n      removeColumnButtonLeft,\n      currentCellIndex\n    });\n  };\n\n  deleteRow = () => {\n    let { square, currentRowIndex, removeRowButtonTop } = this.state;\n    let { cellSize } = this.props;\n\n    const rows = square.length;\n    const lastRowIndex = rows - 1;\n\n    if (rows > 1) {\n      square.splice(currentRowIndex, 1);\n\n      if (currentRowIndex === lastRowIndex) {\n        /* In this formula \"2\" - the padding of each cell, for the correct movement\n      of the button should be considered when calculating */\n        removeRowButtonTop =\n          cellSize * (currentRowIndex - 1) + 2 * currentRowIndex;\n        currentRowIndex--;\n      }\n\n      if (lastRowIndex <= 1) {\n        this.setState({\n          removeRowButtonDisplay: false\n        });\n      }\n\n      this.setState({\n        square,\n        removeRowButtonTop,\n        currentRowIndex\n      });\n    }\n  };\n\n  showButtons = () => {\n    let { square, buttonsVisible } = this.state;\n\n    if (square.length > 1) {\n      buttonsVisible = true;\n    }\n\n    if (square[0].columns.length > 1) {\n      buttonsVisible = true;\n    }\n\n    this.setState({\n      buttonsVisible: buttonsVisible\n    });\n  };\n\n  hideButtons = () => {\n    let { buttonsVisible } = this.state;\n    buttonsVisible = false;\n\n    this.setState({\n      buttonsVisible: buttonsVisible\n    });\n  };\n\n  render() {\n    const { cellSize } = this.props;\n\n    const {\n      square,\n      buttonsVisible,\n      removeRowButtonDisplay,\n      removeColumnButtonDisplay,\n      removeRowButtonTop,\n      removeColumnButtonLeft,\n      currentRowIndex,\n      currentCellIndex,\n      containerAbsolute,\n      containerLeft,\n      containerTop,\n      dragging\n    } = this.state;\n\n    return (\n      <Wrapper\n        className=\"wrapper\"\n        onMouseMove={this.onDragging}\n        onMouseUp={this.onDragEnd}\n      >\n        <Container\n          className=\"container\"\n          ref={this.containerRef}\n          containerLeft={containerLeft}\n          containerTop={containerTop}\n          containerAbsolute={containerAbsolute}\n          cellSize={cellSize}\n          dragging={dragging}\n          onMouseOver={this.movingButtons}\n        >\n          <div\n            className=\"square-container\"\n            onMouseEnter={this.showButtons}\n            onMouseLeave={this.hideButtons}\n          >\n            <Table onMouseDown={this.onDragStart} onDragStart={() => false}>\n              <tbody>\n                {square.map(row => (\n                  <tr key={`row-${row.key}`} className=\"row\">\n                    {row.columns.map(cell => (\n                      <Cell\n                        key={`cell-${cell.key}`}\n                        cellSize={cellSize}\n                        className=\"cell\"\n                        currentRowIndex={currentRowIndex}\n                        currentCellIndex={currentCellIndex}\n                      />\n                    ))}\n                  </tr>\n                ))}\n              </tbody>\n            </Table>\n\n            <RemoveRowButton\n              className=\"remove-row-button\"\n              onClick={this.deleteRow}\n              cellSize={cellSize}\n              buttonsVisible={buttonsVisible}\n              removeRowButtonDisplay={removeRowButtonDisplay}\n              removeRowButtonTop={removeRowButtonTop}\n            >\n              -\n            </RemoveRowButton>\n            <RemoveColumnButton\n              classname=\"remove-column-button\"\n              onClick={this.deleteColumn}\n              cellSize={cellSize}\n              buttonsVisible={buttonsVisible}\n              removeColumnButtonDisplay={removeColumnButtonDisplay}\n              removeColumnButtonLeft={removeColumnButtonLeft}\n            >\n              -\n            </RemoveColumnButton>\n          </div>\n          <AddRowButton\n            className=\"add-row-button\"\n            cellSize={cellSize}\n            onClick={this.createRow}\n          >\n            +\n          </AddRowButton>\n          <AddColumnButton\n            className=\"add-column-button\"\n            cellSize={cellSize}\n            onClick={this.createColumn}\n          >\n            +\n          </AddColumnButton>\n        </Container>\n      </Wrapper>\n    );\n  }\n}\n\nSquare.defaultProps = {\n  cellSize: 50,\n  initialHeight: 4,\n  initialWidth: 4\n};\n\nSquare.propTypes = {\n  cellSize: PropTypes.number.isRequired,\n  initialHeight: PropTypes.number.isRequired,\n  initialWidth: PropTypes.number.isRequired\n};\n","import React from \"react\";\nimport Square from \"../Square\";\n\nfunction App() {\n  return <Square initialWidth={4} initialHeight={4} cellSize={50} />;\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}