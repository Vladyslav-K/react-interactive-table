{"version":3,"sources":["components/Square/index.js","components/App/index.js","index.js"],"names":["Wrapper","styled","div","Container","props","containerPosition","left","top","Table","table","Cell","td","cellSize","Button","AddButtons","RemoveButtons","AddRowButton","AddColumnButton","RemoveRowButton","removeRowButtonDisplay","buttonsVisible","removeRowButtonTop","RemoveColumnButton","removeColumnButtonDisplay","removeColumnButtonLeft","Square","createSquare","state","rows","columns","cloneRows","cloneColumns","initialHeight","initialWidth","cells","key","cellKey","rowKey","setState","onDragStart","clientX","clientY","offsetX","container","getBoundingClientRect","offsetY","dragging","onDragging","pageX","pageY","style","onDragEnd","containerStyle","cloneContainerPosition","removeAttribute","movingButtons","target","currentRowIndex","currentCellIndex","tagName","offsetLeft","offsetTop","cellIndex","parentNode","rowIndex","createColumn","createRow","deleteColumn","columnsLength","length","lastCellIndex","splice","deleteRow","rowsLength","lastRowIndex","showButtons","hideButtons","square","this","document","querySelector","onMouseMove","onMouseUp","id","onMouseOver","onMouseEnter","onMouseLeave","onMouseDown","map","row","cell","onClick","React","Component","defaultProps","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.8af64398.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n  height: 100vh;\n  width: 100vw;\n\n  margin: 0;\n  padding: 0;\n`;\n\nconst Container = styled.div`\n  display: inline-block;\n\n  position: absolute;\n\n  left: ${props => props.containerPosition.left};\n  top: ${props => props.containerPosition.top};\n`;\n\nconst Table = styled.table`\n  border: 1px solid #48aae6;\n  cursor: grab;\n`;\n\nconst Cell = styled.td`\n  height: ${props => props.cellSize}px;\n  width: ${props => props.cellSize}px;\n\n  padding: 0;\n\n  background-color: #48aae6;\n`;\n\nconst Button = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: absolute;\n\n  height: ${props => props.cellSize}px;\n  width: ${props => props.cellSize}px;\n  margin: 2px;\n\n  color: #ffffff;\n\n  font-size: ${props => props.cellSize / 2}px;\n  font-weight: bold;\n  text-align: center;\n\n  opacity: 1;\n\n  transition-duration: 0.6s;\n  cursor: pointer;\n\n  &:hover {\n    opacity: 0.8;\n    transition-duration: 0.5s;\n  }\n`;\n\nconst AddButtons = styled(Button)`\n  background-color: #f3a500;\n`;\n\nconst RemoveButtons = styled(Button)`\n  display: block;\n  visibility: hidden;\n\n  background-color: #b20000;\n\n  line-height: ${props => props.cellSize - props.cellSize / 5}px;\n`;\n\nconst AddRowButton = styled(AddButtons)`\n  top: 100%;\n  left: 1px;\n`;\n\nconst AddColumnButton = styled(AddButtons)`\n  top: 1px;\n  left: 100%;\n`;\n\nconst RemoveRowButton = styled(RemoveButtons)`\n  display: ${props =>\n    props.removeRowButtonDisplay === true ? \"block\" : \"none\"};\n  visibility: ${props =>\n    props.buttonsVisible === true ? \"visible\" : \"hidden\"};\n  opacity: ${props => (props.buttonsVisible === true ? 1 : 0)};\n\n  top: ${props => props.removeRowButtonTop}px;\n  right: 100%;\n\n  margin: 1px 2px;\n`;\n\nconst RemoveColumnButton = styled(RemoveButtons)`\n  display: ${props =>\n    props.removeColumnButtonDisplay === true ? \"block\" : \"none\"};\n  visibility: ${props =>\n    props.buttonsVisible === true ? \"visible\" : \"hidden\"};\n  opacity: ${props => (props.buttonsVisible === true ? 1 : 0)};\n\n  bottom: 100%;\n  left: ${props => props.removeColumnButtonLeft}px;\n\n  margin: 2px 1px;\n`;\n\nexport default class Square extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      square: [],\n\n      rows: [],\n      columns: [],\n\n      rowKey: 0,\n      cellKey: 0,\n\n      containerPosition: {\n        left: `${this.props.cellSize * 2}px`,\n        top: `${this.props.cellSize * 2}px`\n      },\n\n      currentCellIndex: 0,\n      currentRowIndex: 0,\n\n      buttonsVisible: false,\n      removeRowButtonDisplay: true,\n      removeColumnButtonDisplay: true,\n\n      removeRowButtonTop: 0,\n      removeColumnButtonLeft: 0,\n\n      dragging: false\n    };\n\n    this.rowKey = 0;\n    this.cellKey = 0;\n\n    this.offsetX = 0;\n    this.offsetY = 0;\n  }\n\n  componentDidMount() {\n    this.createSquare();\n    this.container = document.querySelector(\"#container\");\n  }\n\n  createSquare = () => {\n    const { rows, columns } = this.state;\n    const cloneRows = [...rows];\n    const cloneColumns = [...columns];\n\n    const { initialHeight, initialWidth } = this.props;\n\n    for (let cells = 0; cells < initialWidth; cells++) {\n      cloneColumns[cells] = {\n        key: this.cellKey++\n      };\n    }\n\n    for (let rows = 0; rows < initialHeight; rows++) {\n      cloneRows[rows] = {\n        key: this.rowKey++,\n        columns: cloneColumns\n      };\n    }\n\n    this.setState({\n      rows: cloneRows,\n      columns: cloneColumns\n    });\n  };\n\n  onDragStart = ({ clientX, clientY }) => {\n    this.offsetX = clientX - this.container.getBoundingClientRect().left;\n    this.offsetY = clientY - this.container.getBoundingClientRect().top;\n\n    this.setState({\n      dragging: true\n    });\n  };\n\n  onDragging = ({ pageX, pageY }) => {\n    const { dragging } = this.state;\n\n    if (dragging) {\n      this.container.style.left = pageX - this.offsetX + \"px\";\n      this.container.style.top = pageY - this.offsetY + \"px\";\n    }\n  };\n\n  onDragEnd = () => {\n    const container = this.container\n    const containerStyle = container.style\n\n    const cloneContainerPosition = {...this.state.containerPosition};\n    cloneContainerPosition.left = containerStyle.left;\n    cloneContainerPosition.top = containerStyle.top;\n\n    if(containerStyle.left && containerStyle.top) {\n      this.setState({\n        containerPosition: cloneContainerPosition\n      })\n      container.removeAttribute(\"style\");\n    }\n\n    this.setState({\n      dragging: false\n    });\n  };\n\n  movingButtons = ({ target }) => {\n    let {\n      currentRowIndex,\n      currentCellIndex,\n      removeColumnButtonLeft,\n      removeRowButtonTop\n    } = this.state;\n\n    if (target.tagName === \"TD\") {\n      removeColumnButtonLeft = target.offsetLeft;\n      removeRowButtonTop = target.offsetTop;\n      currentCellIndex = target.cellIndex;\n      currentRowIndex = target.parentNode.rowIndex;\n    }\n\n    this.setState({\n      currentRowIndex,\n      currentCellIndex,\n      removeColumnButtonLeft,\n      removeRowButtonTop\n    });\n  };\n\n  createColumn = () => {\n    const { columns } = this.state;\n    const cloneColumns = [...columns, { key: this.cellKey++ }];\n\n    this.setState({\n      columns: cloneColumns\n    });\n  };\n\n  createRow = () => {\n    const { rows, columns } = this.state;\n    const cloneColumns = [...columns];\n    const cloneRows = [...rows, { key: this.rowKey++, columns: cloneColumns }];\n\n    this.setState({\n      rows: cloneRows\n    });\n  };\n\n  deleteColumn = () => {\n    const { cellSize } = this.props;\n    const { rows, columns } = this.state;\n    let { currentCellIndex, removeColumnButtonLeft } = this.state;\n\n    const cloneRows = [...rows];\n    const cloneColumns = [...columns];\n\n    const columnsLength = cloneColumns.length;\n    const lastCellIndex = columnsLength - 1;\n\n    if (columnsLength > 1) {\n      cloneColumns.splice(currentCellIndex, 1);\n    }\n\n    if (currentCellIndex === lastCellIndex) {\n      /* In this formula \"2\" - the padding of each cell, for the correct movement\n      of the button should be considered when calculating */\n      removeColumnButtonLeft =\n        cellSize * (currentCellIndex - 1) + 2 * currentCellIndex;\n\n      currentCellIndex--;\n    }\n\n    if (lastCellIndex <= 1) {\n      this.setState({\n        removeColumnButtonDisplay: false\n      });\n    }\n\n    this.setState({\n      rows: cloneRows,\n      columns: cloneColumns,\n      removeColumnButtonLeft,\n      currentCellIndex\n    });\n  };\n\n  deleteRow = () => {\n    const { cellSize } = this.props;\n    const { rows } = this.state;\n    let { currentRowIndex, removeRowButtonTop } = this.state;\n\n    const cloneRows = [...rows];\n\n    const rowsLength = cloneRows.length;\n    const lastRowIndex = rowsLength - 1;\n\n    if (rowsLength > 1) {\n      cloneRows.splice(currentRowIndex, 1);\n    }\n\n    if (currentRowIndex === lastRowIndex) {\n      /* In this formula \"2\" - the padding of each cell, for the correct movement\n    of the button should be considered when calculating */\n      removeRowButtonTop =\n        cellSize * (currentRowIndex - 1) + 2 * currentRowIndex;\n\n      currentRowIndex--;\n    }\n\n    if (lastRowIndex <= 1) {\n      this.setState({\n        removeRowButtonDisplay: false\n      });\n    }\n\n    this.setState({\n      rows: cloneRows,\n      removeRowButtonTop,\n      currentRowIndex\n    });\n  };\n\n  showButtons = () => {\n    const { rows, columns } = this.state;\n\n    if (rows.length > 1) {\n      this.setState({\n        buttonsVisible: true,\n        removeRowButtonDisplay: true\n      });\n    }\n\n    if (columns.length > 1) {\n      this.setState({\n        buttonsVisible: true,\n        removeColumnButtonDisplay: true\n      });\n    }\n  };\n\n  hideButtons = () => {\n    this.setState({\n      buttonsVisible: false\n    });\n  };\n\n  render() {\n    const { cellSize } = this.props;\n\n    const {\n      rows,\n      columns,\n      buttonsVisible,\n      removeRowButtonDisplay,\n      removeColumnButtonDisplay,\n      removeRowButtonTop,\n      removeColumnButtonLeft,\n      containerPosition\n    } = this.state;\n\n    return (\n      <Wrapper onMouseMove={this.onDragging} onMouseUp={this.onDragEnd}>\n        <Container\n          id={\"container\"}\n          containerPosition={containerPosition}\n          cellSize={cellSize}\n          onMouseOver={this.movingButtons}\n        >\n          <div onMouseEnter={this.showButtons} onMouseLeave={this.hideButtons}>\n            <Table onMouseDown={this.onDragStart} onDragStart={() => false}>\n              <tbody>\n                {rows.map(row => (\n                  <tr key={`row-${row.key}`}>\n                    {columns.map(cell => (\n                      <Cell key={`cell-${cell.key}`} cellSize={cellSize} />\n                    ))}\n                  </tr>\n                ))}\n              </tbody>\n            </Table>\n\n            <RemoveRowButton\n              onClick={this.deleteRow}\n              cellSize={cellSize}\n              buttonsVisible={buttonsVisible}\n              removeRowButtonDisplay={removeRowButtonDisplay}\n              removeRowButtonTop={removeRowButtonTop}\n            >\n              -\n            </RemoveRowButton>\n            <RemoveColumnButton\n              onClick={this.deleteColumn}\n              cellSize={cellSize}\n              buttonsVisible={buttonsVisible}\n              removeColumnButtonDisplay={removeColumnButtonDisplay}\n              removeColumnButtonLeft={removeColumnButtonLeft}\n            >\n              -\n            </RemoveColumnButton>\n          </div>\n          <AddRowButton cellSize={cellSize} onClick={this.createRow}>\n            +\n          </AddRowButton>\n          <AddColumnButton cellSize={cellSize} onClick={this.createColumn}>\n            +\n          </AddColumnButton>\n        </Container>\n      </Wrapper>\n    );\n  }\n}\n\nSquare.defaultProps = {\n  cellSize: 50,\n  initialHeight: 4,\n  initialWidth: 4\n};\n\nSquare.propTypes = {\n  cellSize: PropTypes.number.isRequired,\n  initialHeight: PropTypes.number.isRequired,\n  initialWidth: PropTypes.number.isRequired\n};\n","import React from \"react\";\nimport Square from \"../Square\";\n\nfunction App() {\n  return <Square initialWidth={4} initialHeight={4} cellSize={50} />;\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}